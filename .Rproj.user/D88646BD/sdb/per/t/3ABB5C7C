{
    "collab_server" : "",
    "contents" : "#' FUNCTION: table_generator_coverage\n#'\n#' Generates a latex table or a data frame for coverage table with effect size and U test.\n#' @param d Data frame of analysis\n#' @param rtrn Latex (tex) or a data frame (data)\n#' @param m Results shown as median or mean\n#' @return A A12 effect size and U-test of coverages compared pair wise\n#' @importFrom magrittr %>%\n#' @export\ntable_generator_coverage <- function(d, rtrn = \"tex\", m = \"median\") {\n  # Arrange dataframe by case study\n  d <- d %>% dplyr::arrange(casestudy)\n  d <- d %>% dplyr::filter(casestudy != \"iTrust\")\n  # Store the dataframe into another var\n  d1 <- d\n  # generate a DF for mean or median\n  if (m == \"mean\") {\n    d <- d %>% dplyr::select(dbms, casestudy, datagenerator, coverage, randomseed) %>%\n      dplyr::group_by(dbms, casestudy, datagenerator) %>%\n      dplyr::summarise(coverage = format(round((mean(coverage)), 1), nsmall = 1))\n  } else {\n    d <- d %>% dplyr::select(dbms, casestudy, datagenerator, coverage, randomseed) %>%\n      dplyr::group_by(dbms, casestudy, datagenerator) %>%\n      dplyr::summarise(coverage = format(round((median(coverage)), 1), nsmall = 1))\n  }\n  #browser()\n  # filp the data frame\n  d <- reshape2::dcast(d, casestudy ~ dbms + datagenerator, value.var=c(\"coverage\"))\n  # get header\n  a1 <- d[1]\n  # Split by DBMS\n  d2 <- d[2:16]\n  d <- d2[ , order(names(d2))]\n  c <- d[1:5]\n  c <- c[c(3,4,1,2,5)]\n  a <- d[6:10]\n  a <- a[c(3,4,1,2,5)]\n  b <- d[11:15]\n  b <- b[c(3,4,1,2,5)]\n  # change the schemas from fectors to char\n  a1$casestudy <- as.character(a1$casestudy)\n  # get nunber of rows and itrate through them\n  numberOfRows <- nrow(d)\n  for (i in 1:numberOfRows) {\n    schema <- a1[i,]\n    # get each generators\n    dr <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"directedRandom\")\n    avm <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"avs\")\n    avmd <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"avsDefaults\")\n    rand <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"random\")\n    dravm <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"dravm\")\n\n    # Effect size for PSQL\n    postgres_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$coverage,\n                                                         (avm %>% dplyr::filter(dbms == \"Postgres\"))$coverage)$size\n    postgres_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$coverage,\n                                                          (avmd %>% dplyr::filter(dbms == \"Postgres\"))$coverage)$size\n    postgres_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$coverage,\n                                                          (rand %>% dplyr::filter(dbms == \"Postgres\"))$coverage)$size\n    postgres_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$coverage,\n                                                           (dravm %>% dplyr::filter(dbms == \"Postgres\"))$coverage)$size\n\n    dr_coverage <- (dr %>% dplyr::filter(dbms == \"Postgres\"))$coverage\n    dravm_coverage <- (dravm %>% dplyr::filter(dbms == \"Postgres\"))$coverage\n\n    a[i,2] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = dravm_coverage,\n                           effect = postgres_dravm,\n                           result = a[i,2])\n\n    # get coverage\n    avmr_coverage <- (avm %>% dplyr::filter(dbms == \"Postgres\"))$coverage\n\n    a[i,3] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = avmr_coverage,\n                           effect = postgres_avm,\n                           result = a[i,3])\n\n\n    # get coverage\n    avmd_coverage <- (avmd %>% dplyr::filter(dbms == \"Postgres\"))$coverage\n    a[i,4] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = avmd_coverage,\n                           effect = postgres_avmd,\n                           result = a[i,4])\n\n\n    # U-test Random vs DR\n    rand_coverage <- (rand %>% dplyr::filter(dbms == \"Postgres\"))$coverage\n\n    a[i,5] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = rand_coverage,\n                           effect = postgres_rand,\n                           result = a[i,5])\n\n\n    # get SQLite effect size\n    sqlite_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$coverage,\n                                                       (avm %>% dplyr::filter(dbms == \"SQLite\"))$coverage)$size\n    sqlite_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$coverage,\n                                                        (avmd %>% dplyr::filter(dbms == \"SQLite\"))$coverage)$size\n    sqlite_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$coverage,\n                                                        (rand %>% dplyr::filter(dbms == \"SQLite\"))$coverage)$size\n    sqlite_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$coverage,\n                                                         (dravm %>% dplyr::filter(dbms == \"SQLite\"))$coverage)$size\n\n    # get coverage\n    dr_coverage <- (dr %>% dplyr::filter(dbms == \"SQLite\"))$coverage\n    dravm_coverage <- (dravm %>% dplyr::filter(dbms == \"SQLite\"))$coverage\n\n    b[i,2] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = dravm_coverage,\n                           effect = sqlite_dravm,\n                           result = b[i,2])\n\n\n\n    # U-test AVMR vs DR\n    avmr_coverage <- (avm %>% dplyr::filter(dbms == \"SQLite\"))$coverage\n    b[i,3] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = avmr_coverage,\n                           effect = sqlite_avm,\n                           result = b[i,3])\n\n\n\n    # U-test AVMD vs DR\n    avmd_coverage <- (avmd %>% dplyr::filter(dbms == \"SQLite\"))$coverage\n    b[i,4] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = avmd_coverage,\n                           effect = sqlite_avmd,\n                           result = b[i,4])\n\n\n    # U-test Random vs DR\n    rand_coverage <- (rand %>% dplyr::filter(dbms == \"SQLite\"))$coverage\n    b[i,5] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = rand_coverage,\n                           effect = sqlite_rand,\n                           result = b[i,5])\n\n    # calculate effect size for coverage for HSQL\n    hsql_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage,\n                                                     (avm %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage)$size\n    hsql_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage,\n                                                      (avmd %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage)$size\n    hsql_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage,\n                                                      (rand %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage)$size\n    hsql_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage,\n                                                       (dravm %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage)$size\n\n    # U-test DRAVM vs DR\n    dr_coverage <- (dr %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage\n    dravm_coverage <- (dravm %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage\n    c[i,2] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = dravm_coverage,\n                           effect = hsql_dravm,\n                           result = c[i,2])\n\n\n    # U-test AVMR vs DR\n    avmr_coverage <- (avm %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage\n    c[i,3] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = avmr_coverage,\n                           effect = hsql_avm,\n                           result = c[i,3])\n\n\n\n    avmd_coverage <- (avmd %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage\n    c[i,4] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = avmd_coverage,\n                           effect = hsql_avmd,\n                           result = c[i,4])\n\n\n    rand_coverage <- (rand %>% dplyr::filter(dbms == \"HyperSQL\"))$coverage\n    c[i,5] = comparing_sig(sample1 = dr_coverage,\n                           sample2 = rand_coverage,\n                           effect = hsql_rand,\n                           result = c[i,5])\n\n\n    # for latex purposes\n    if (a1[i,] == \"NistXTS749\") {\n      a1[i,] <- \"NistXTSNine\"\n    }\n    if (a1[i,] == \"Iso3166\") {\n      a1[i,] <- \"Isoiii\"\n    }\n    if (a1[i,] == \"IsoFlav_R2\") {\n      a1[i,] <- \"IsoFlav\"\n    }\n    if (a1[i,] == \"NistDML181\") {\n      a1[i,] <- \"NistDMLi\"\n    }\n    if (a1[i,] == \"NistDML182\") {\n      a1[i,] <- \"NistDMLii\"\n    }\n    if (a1[i,] == \"NistDML183\") {\n      a1[i,] <- \"NistDMLiii\"\n    }\n    if (a1[i,] == \"NistXTS748\") {\n      a1[i,] <- \"NistXTSEight\"\n    }\n    a1[i,] <- paste(\"\\\\\", a1[i,], \"ForTable\", sep = \"\")\n  }\n  # Combain data\n  #a <- a[c(1,4,3,2)]\n  #b <- b[c(1,4,3,2)]\n  #c <- c[c(1,4,3,2)]\n  # With HSQL\n  d <- cbind(a1,c,a,b)\n  # Without HSQL\n  #d <- cbind(a1,a,b)\n  if (rtrn == \"tex\") {\n    return(print(xtable::xtable(d), include.rownames=FALSE ,sanitize.text.function = function(x){x}))\n  } else {\n    return(d)\n  }\n}\n\n#' FUNCTION: table_generator_timing\n#'\n#' Generates a latex table or data frame for test generation timing table with effect size and U test.\n#' @param d Data frame of analysis\n#' @param rtrn Latex (tex) or a data frame (data)\n#' @param m Results shown as median or mean\n#' @return A A12 effect size and U-test of test generation timing compared pair wise\n#' @importFrom magrittr %>%\n#' @export\ntable_generator_timing <- function(d, rtrn = \"tex\", m = \"median\") {\n  # Arrange dataframe by case study\n  d <- d %>% dplyr::arrange(casestudy)\n  d <- d %>% dplyr::filter(casestudy != \"iTrust\")\n\n  # copy values for Sig without transforming\n  d3 <- d\n  # Transform data with rounding down\n  d1 <- d\n  # d1 <- ragtag::transform_execution_times_for_threshold(d, 1000)\n  # generate a DF for mean or median\n  if (m == \"mean\") {\n    d <- d %>% dplyr::select(dbms, casestudy, datagenerator, testgenerationtime, randomseed) %>% dplyr::group_by(dbms, casestudy, datagenerator) %>% dplyr::summarise(testgenerationtime = format(round((mean(testgenerationtime) / 1000), 2), nsmall = 2))\n  } else {\n    d <- d %>% dplyr::select(dbms, casestudy, datagenerator, testgenerationtime, randomseed) %>% dplyr::group_by(dbms, casestudy, datagenerator) %>% dplyr::summarise(testgenerationtime = format(round((median(testgenerationtime) / 1000), 2), nsmall = 2))\n  }\n  # filp the data frame\n  d <- reshape2::dcast(d, casestudy ~ dbms + datagenerator, value.var=c(\"testgenerationtime\"))\n  # get header\n  a1 <- d[1]\n  # Split by DBMS\n  d2 <- d[2:16]\n  d <- d2[ , order(names(d2))]\n  c <- d[1:5]\n  c <- c[c(3,4,1,2,5)]\n  a <- d[6:10]\n  a <- a[c(3,4,1,2,5)]\n  b <- d[11:15]\n  b <- b[c(3,4,1,2,5)]\n  # get nunber of rows and itrate through them\n  numberOfRows <- nrow(d)\n  # change the schemas from fectors to char\n  a1$casestudy <- as.character(a1$casestudy)\n  for (i in 1:numberOfRows) {\n    schema <- a1[i,]\n    # get each generators for transformed data\n    dr <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"directedRandom\")\n    avm <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"avs\")\n    avmd <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"avsDefaults\")\n    rand <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"random\")\n    dravm <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"dravm\")\n\n\n    # Effect size for PSQL\n    postgres_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime,\n                                                         (avm %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime)$size\n    postgres_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime,\n                                                          (avmd %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime)$size\n    postgres_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime,\n                                                          (rand %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime)$size\n    postgres_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime,\n                                                           (dravm %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime)$size\n\n    # get generators for non-transformed\n    drp <- d3 %>% dplyr::filter(casestudy == schema, datagenerator == \"directedRandom\")\n    avmp <- d3 %>% dplyr::filter(casestudy == schema, datagenerator == \"avs\")\n    avmdp <- d3 %>% dplyr::filter(casestudy == schema, datagenerator == \"avsDefaults\")\n    randp <- d3 %>% dplyr::filter(casestudy == schema, datagenerator == \"random\")\n    dravmp <- d3 %>% dplyr::filter(casestudy == schema, datagenerator == \"dravm\")\n\n    dr_time <- (drp %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime\n    avmr_time <- (dravmp %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime\n\n    a[i,2] = comparing_sig_timing(sample1 = dr_time,\n                           sample2 = avmr_time,\n                           effect = postgres_dravm,\n                           result = a[i,2])\n\n\n    avmr_time <- (avmp %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime\n\n    a[i,3] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = avmr_time,\n                                  effect = postgres_avm,\n                                  result = a[i,3])\n\n\n    # AVM-D\n    avmd_time <- (avmdp %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime\n\n    a[i,4] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = avmd_time,\n                                  effect = postgres_avmd,\n                                  result = a[i,4])\n\n\n    # RANDOM\n    rand_time <- (randp %>% dplyr::filter(dbms == \"Postgres\"))$testgenerationtime\n\n    a[i,5] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = rand_time,\n                                  effect = postgres_rand,\n                                  result = a[i,5])\n\n    # Effect size for SQLite\n    sqlite_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime,\n                                                       (avm %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime)$size\n    sqlite_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime,\n                                                        (avmd %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime)$size\n    sqlite_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime,\n                                                        (rand %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime)$size\n    sqlite_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime,\n                                                         (dravm %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime)$size\n\n    # DR vs AVM-R U-test\n    dr_time <- (drp %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime\n    dravmp_time <- (dravmp %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime\n\n    b[i,2] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = dravmp_time,\n                                  effect = sqlite_dravm,\n                                  result = b[i,2])\n\n    # DR vs AVM-R U-test\n    avmr_time <- (avmp %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime\n\n    b[i,3] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = avmr_time,\n                                  effect = sqlite_avm,\n                                  result = b[i,3])\n\n    # AVM-D u-test\n    avmd_time <- (avmdp %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime\n\n    b[i,4] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = avmd_time,\n                                  effect = sqlite_avmd,\n                                  result = b[i,4])\n\n    # Random U-Test\n    rand_time <- (randp %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime\n\n    b[i,5] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = rand_time,\n                                  effect = sqlite_rand,\n                                  result = b[i,5])\n\n    # Effect size for HSQL\n    hsql_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime,\n                                                     (avm %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime)$size\n    hsql_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime,\n                                                      (avmd %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime)$size\n    hsql_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime,\n                                                      (rand %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime)$size\n    hsql_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime,\n                                                       (dravm %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime)$size\n\n    # U-Test avm-r vs dr\n    dr_time <- (drp %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime\n    dravm_time <- (dravmp %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime\n\n    c[i,2] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = dravm_time,\n                                  effect = hsql_dravm,\n                                  result = c[i,2])\n\n    # U-Test avm-r vs dr\n    avmr_time <- (avmp %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime\n\n    c[i,3] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = avmr_time,\n                                  effect = hsql_avm,\n                                  result = c[i,3])\n\n    # U-Test avm-d\n    avmd_time <- (avmdp %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime\n\n    c[i,4] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = avmd_time,\n                                  effect = hsql_avmd,\n                                  result = c[i,4])\n\n\n\n    # Rnadom u-test\n    rand_time <- (randp %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime\n\n    c[i,5] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = rand_time,\n                                  effect = hsql_rand,\n                                  result = c[i,5])\n\n    # for latex purposes\n    if (a1[i,] == \"NistXTS749\") {\n      a1[i,] <- \"NistXTSNine\"\n    }\n    if (a1[i,] == \"Iso3166\") {\n      a1[i,] <- \"Isoiii\"\n    }\n    if (a1[i,] == \"IsoFlav_R2\") {\n      a1[i,] <- \"IsoFlav\"\n    }\n    if (a1[i,] == \"NistDML181\") {\n      a1[i,] <- \"NistDMLi\"\n    }\n    if (a1[i,] == \"NistDML182\") {\n      a1[i,] <- \"NistDMLii\"\n    }\n    if (a1[i,] == \"NistDML183\") {\n      a1[i,] <- \"NistDMLiii\"\n    }\n    if (a1[i,] == \"NistXTS748\") {\n      a1[i,] <- \"NistXTSEight\"\n    }\n    a1[i,] <- paste(\"\\\\\", a1[i,], \"ForTable\", sep = \"\")\n  }\n  # Combain data\n  #a <- a[c(1,4,3,2)]\n  #b <- b[c(1,4,3,2)]\n  #c <- c[c(1,4,3,2)]\n\n  # With HSQL\n  d <- cbind(a1,c,a,b)\n  # Without HSQL\n  #d <- cbind(a1,a,b)\n  #return(d)\n  if (rtrn == \"tex\") {\n    return(print(xtable::xtable(d), include.rownames=FALSE ,sanitize.text.function = function(x){x}))\n  } else {\n    return(d)\n  }\n}\n\n\ntable_generator_timing_hsql <- function(d, rtrn = \"tex\", m = \"median\") {\n  # Arrange dataframe by case study\n  d <- d %>% dplyr::arrange(casestudy)\n  d <- d %>% dplyr::filter(casestudy != \"iTrust\")\n\n  # copy values for Sig without transforming\n  d3 <- d\n  # Transform data with rounding down\n  d1 <- d\n  # d1 <- ragtag::transform_execution_times_for_threshold(d, 1000)\n  # generate a DF for mean or median\n  if (m == \"mean\") {\n    d <- d %>% dplyr::select(dbms, casestudy, datagenerator, testgenerationtime, randomseed) %>% dplyr::group_by(dbms, casestudy, datagenerator) %>% dplyr::summarise(testgenerationtime = format(round((mean(testgenerationtime) / 1000), 2), nsmall = 2))\n  } else {\n    d <- d %>% dplyr::select(dbms, casestudy, datagenerator, testgenerationtime, randomseed) %>% dplyr::group_by(dbms, casestudy, datagenerator) %>% dplyr::summarise(testgenerationtime = format(round((median(testgenerationtime) / 1000), 2), nsmall = 2))\n  }\n  # filp the data frame\n  d <- reshape2::dcast(d, casestudy ~ dbms + datagenerator, value.var=c(\"testgenerationtime\"))\n  # get header\n  a1 <- d[1]\n  # Split by DBMS\n  d2 <- d[2:5]\n  d <- d2[ , order(names(d2))]\n  # c <- d[1:5]\n  # c <- c[c(3,4,1,2,5)]\n  browser()\n  c <- d[1:2]\n  c <- c[c(2,1)]\n  b <- d[3:4]\n  b <- b[c(2,1)]\n  # get nunber of rows and itrate through them\n  numberOfRows <- nrow(d)\n  # change the schemas from fectors to char\n  a1$casestudy <- as.character(a1$casestudy)\n  for (i in 1:numberOfRows) {\n    schema <- a1[i,]\n    #browser()\n    # get each generators for transformed data\n    dr <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"concentroRandom\")\n    dravm <- d1 %>% dplyr::filter(casestudy == schema, datagenerator == \"concentroAVS\")\n\n    # get generators for non-transformed\n    drp <- d3 %>% dplyr::filter(casestudy == schema, datagenerator == \"concentroRandom\")\n    dravmp <- d3 %>% dplyr::filter(casestudy == schema, datagenerator == \"concentroAVS\")\n\n    # Effect size for SQLite\n    sqlite_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime,\n                                                         (dravm %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime)$size\n\n    # DR vs AVM-R U-test\n    dr_time <- (drp %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime\n    dravmp_time <- (dravmp %>% dplyr::filter(dbms == \"SQLite\"))$testgenerationtime\n\n    b[i,2] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = dravmp_time,\n                                  effect = sqlite_dravm,\n                                  result = b[i,2])\n\n\n\n    # Effect size for HSQL\n    hsql_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime,\n                                                       (dravm %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime)$size\n\n    # U-Test avm-r vs dr\n    dr_time <- (drp %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime\n    dravm_time <- (dravmp %>% dplyr::filter(dbms == \"HyperSQL\"))$testgenerationtime\n\n    c[i,2] = comparing_sig_timing(sample1 = dr_time,\n                                  sample2 = dravm_time,\n                                  effect = hsql_dravm,\n                                  result = c[i,2])\n    # for latex purposes\n    if (a1[i,] == \"NistXTS749\") {\n      a1[i,] <- \"NistXTSNine\"\n    }\n    if (a1[i,] == \"Iso3166\") {\n      a1[i,] <- \"Isoiii\"\n    }\n    if (a1[i,] == \"IsoFlav_R2\") {\n      a1[i,] <- \"IsoFlav\"\n    }\n    if (a1[i,] == \"NistDML181\") {\n      a1[i,] <- \"NistDMLi\"\n    }\n    if (a1[i,] == \"NistDML182\") {\n      a1[i,] <- \"NistDMLii\"\n    }\n    if (a1[i,] == \"NistDML183\") {\n      a1[i,] <- \"NistDMLiii\"\n    }\n    if (a1[i,] == \"NistXTS748\") {\n      a1[i,] <- \"NistXTSEight\"\n    }\n    a1[i,] <- paste(\"\\\\\", a1[i,], \"ForTable\", sep = \"\")\n  }\n  # Combain data\n  #a <- a[c(1,4,3,2)]\n  #b <- b[c(1,4,3,2)]\n  #c <- c[c(1,4,3,2)]\n\n  # With HSQL\n  d <- cbind(a1,c,b)\n  # Without HSQL\n  #d <- cbind(a1,a,b)\n  #return(d)\n  if (rtrn == \"tex\") {\n    return(print(xtable::xtable(d), include.rownames=FALSE ,sanitize.text.function = function(x){x}))\n  } else {\n    return(d)\n  }\n}\n\n#' FUNCTION: table_generator_mutation_score\n#'\n#' Generates a latex table or data frame for mutation score per schema table with effect size and U test.\n#' @param d Data frame of mutants\n#' @param rtrn Latex (tex) or a data frame (data)\n#' @param m Results shown as median or mean\n#' @return A A12 effect size and U-test of mutation score per schema compared pair wise\n#' @importFrom magrittr %>%\n#' @export\ntable_generator_mutation_score <- function(d, rtrn = \"tex\", m = \"median\") {\n  # ordering mutants per run\n  d <- d %>% dplyr::filter(schema != \"iTrust\")\n  d <- ordering_mutants_per_schema(d)\n  # copying data frame so it can be compared for A12 and U-test\n  d1 <- d\n  if (m == \"mean\") {\n    d <- d %>% dplyr::group_by(schema, datagenerator, dbms)  %>% dplyr::summarise(mutationScore = format(round(mean(mutationScore), 1), nsmall = 1))\n  } else {\n    d <- d %>% dplyr::group_by(schema, datagenerator, dbms)  %>% dplyr::summarise(mutationScore = format(round(median(mutationScore), 1), nsmall = 1))\n  }\n  # Reshaping data frame\n  d <- reshape2::dcast(d, schema ~ dbms + datagenerator, value.var=c(\"mutationScore\"))\n  a1 <- d[1]\n  # Splitting data frame per DBMS\n  d2 <- d[2:16]\n  d <- d2[ , order(names(d2))]\n  c <- d[1:5]\n  c <- c[c(3,4,1,2,5)]\n  a <- d[6:10]\n  a <- a[c(3,4,1,2,5)]\n  b <- d[11:15]\n  b <- b[c(3,4,1,2,5)]\n  # Schemas changed to\n  a1$schema <- as.character(a1$schema)\n  numberOfRows <- nrow(d)\n  for (i in 1:numberOfRows) {\n    schema1 <- a1[i,]\n    dr <- d1 %>% dplyr::filter(schema == schema1, datagenerator == \"directedRandom\")\n    avm <- d1 %>% dplyr::filter(schema == schema1, datagenerator == \"avs\")\n    avmd <- d1 %>% dplyr::filter(schema == schema1, datagenerator == \"avsDefaults\")\n    rand <- d1 %>% dplyr::filter(schema == schema1, datagenerator == \"random\")\n    dravm <- d1 %>% dplyr::filter(schema == schema1, datagenerator == \"dravm\")\n\n\n    # PSQL A12\n    postgres_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore,\n                                                         (avm %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore)$size\n    postgres_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore,\n                                                          (avmd %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore)$size\n    postgres_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore,\n                                                          (rand %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore)$size\n    postgres_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore,\n                                                           (dravm %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore)$size\n\n    # DR vs dravm\n    dr_mutation <- (dr %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore\n    dravm_mutation <- (dravm %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore\n\n    a[i,2] = comparing_sig(sample1 = dr_mutation,\n                          sample2 = dravm_mutation,\n                          effect = postgres_dravm,\n                          result = a[i,2])\n\n    # DR vs AVM-r\n    avmr_mutation <- (avm %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore\n\n    a[i,3] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = avmr_mutation,\n                           effect = postgres_avm,\n                           result = a[i,3])\n\n    # AVM-D vs DR\n    avmd_mutation <- (avmd %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore\n\n    a[i,4] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = avmd_mutation,\n                           effect = postgres_avmd,\n                           result = a[i,4])\n\n\n    # Random vs DR\n    rand_mutation <- (rand %>% dplyr::filter(dbms == \"Postgres\"))$mutationScore\n\n    a[i,5] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = rand_mutation,\n                           effect = postgres_rand,\n                           result = a[i,5])\n\n    # A12 SQLite\n    sqlite_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore,\n                                                       (avm %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore)$size\n    sqlite_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore,\n                                                        (avmd %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore)$size\n    sqlite_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore,\n                                                        (rand %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore)$size\n    sqlite_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore,\n                                                         (dravm %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore)$size\n\n    # Dr vs DRAVM\n    dr_mutation <- (dr %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore\n    dravm_mutation <- (dravm %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore\n\n    b[i,2] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = dravm_mutation,\n                           effect = sqlite_dravm,\n                           result = b[i,2])\n\n    # Dr vs AVM-R\n    avmr_mutation <- (avm %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore\n\n    b[i,3] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = avmr_mutation,\n                           effect = sqlite_avm,\n                           result = b[i,3])\n\n    # AVMD vs DR\n    avmd_mutation <- (avmd %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore\n\n    b[i,4] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = avmd_mutation,\n                           effect = sqlite_avmd,\n                           result = b[i,4])\n\n    # Random vs DR\n    rand_mutation <- (rand %>% dplyr::filter(dbms == \"SQLite\"))$mutationScore\n\n    b[i,5] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = rand_mutation,\n                           effect = sqlite_rand,\n                           result = b[i,5])\n\n    # Effect size for HSQL\n    hsql_avm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore,\n                                                     (avm %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore)$size\n    hsql_avmd <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore,\n                                                      (avmd %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore)$size\n    hsql_rand <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore,\n                                                      (rand %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore)$size\n    hsql_dravm <- ragtag::effectsize_accurate((dr %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore,\n                                                       (dravm %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore)$size\n\n    # DR vs AVMR\n    dr_mutation <- (dr %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore\n    dravm_mutation <- (dravm %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore\n\n    c[i,2] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = dravm_mutation,\n                           effect = hsql_dravm,\n                           result = c[i,2])\n    # DR vs AVMR\n    avmr_mutation <- (avm %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore\n\n    c[i,3] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = avmr_mutation,\n                           effect = hsql_avm,\n                           result = c[i,3])\n\n    # AVMD vs DR\n    avmd_mutation <- (avmd %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore\n\n    c[i,4] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = avmd_mutation,\n                           effect = hsql_avmd,\n                           result = c[i,4])\n\n    # Random vs DR\n    rand_mutation <- (rand %>% dplyr::filter(dbms == \"HyperSQL\"))$mutationScore\n\n    c[i,5] = comparing_sig(sample1 = dr_mutation,\n                           sample2 = rand_mutation,\n                           effect = hsql_rand,\n                           result = c[i,5])\n\n    if (a1[i,] == \"NistXTS749\") {\n      a1[i,] <- \"NistXTSNine\"\n    }\n    if (a1[i,] == \"Iso3166\") {\n      a1[i,] <- \"Isoiii\"\n    }\n    if (a1[i,] == \"IsoFlav_R2\") {\n      a1[i,] <- \"IsoFlav\"\n    }\n    if (a1[i,] == \"NistDML181\") {\n      a1[i,] <- \"NistDMLi\"\n    }\n    if (a1[i,] == \"NistDML182\") {\n      a1[i,] <- \"NistDMLii\"\n    }\n    if (a1[i,] == \"NistDML183\") {\n      a1[i,] <- \"NistDMLiii\"\n    }\n    if (a1[i,] == \"NistXTS748\") {\n      a1[i,] <- \"NistXTSEight\"\n    }\n    a1[i,] <- paste(\"\\\\\", a1[i,], \"ForTable\", sep = \"\")\n  }\n  #a <- a[c(1,4,3,2)]\n  #b <- b[c(1,4,3,2)]\n  #c <- c[c(1,4,3,2)]\n  # With HSQL\n  d <- cbind(a1,c,a,b)\n  # Without HSQL\n  #d <- cbind(a1,a,b)\n  if (rtrn == \"tex\") {\n    return(print(xtable::xtable(d), include.rownames=FALSE ,sanitize.text.function = function(x){x}))\n  } else {\n    return(d)\n  }\n}\n\n\n#' FUNCTION: table_generator_mutant_operators\n#'\n#' Generates a latex table or data frame for mutation operators table with effect size and U test.\n#' @param d Data frame of mutants\n#' @param rtrn Latex (tex) or a data frame (data)\n#' @param m Results shown as median or mean\n#' @return A A12 effect size and U-test of mutation score per operator compared pair wise\n#' @importFrom magrittr %>%\n#' @export\ntable_generator_mutant_operators <- function(d, rtrn = \"tex\", m = \"median\") {\n  # Order mutants per run\n  d <- ordering_mutants_per_operator(d)\n  # copying data before reshaping\n  d1 <- d\n  if (m == \"mean\") {\n    a <- d %>% dplyr::group_by(dbms, generator, operator) %>% dplyr::summarise(value = format(mean(mutationScore), nsmall = 1))\n  } else {\n    a <- d %>% dplyr::group_by(dbms, generator, operator) %>% dplyr::summarise(value = format(median(mutationScore), nsmall = 1))\n  }\n  d <- reshape2::dcast(a,  operator ~ dbms + generator)\n  # Spliting df per DBMS\n  a1 <- d[1]\n  d2 <- d[2:13]\n  d <- d2[ , order(names(d2))]\n  c <- d[1:4]\n  c <- c[c(3,1,2,4)]\n  a <- d[5:8]\n  a <- a[c(3,1,2,4)]\n  b <- d[9:12]\n  b <- b[c(3,1,2,4)]\n  # Transoferming operater columns to strings\n  a1$operator <- as.character(a1$operator)\n  numberOfRows <- nrow(d)\n  for (i in 1:numberOfRows) {\n    selected_operator <- a1[i,]\n    # Selecting data per DBMS and generator\n    postgres_dr <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"Postgres\", generator == \"directedRandom\")\n    postgres_avm <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"Postgres\", generator == \"avs\")\n    postgres_avmd <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"Postgres\", generator == \"avsDefaults\")\n    postgres_rand <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"Postgres\", generator == \"random\")\n    sqlite_dr <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"SQLite\", generator == \"directedRandom\")\n    sqlite_avm <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"SQLite\", generator == \"avs\")\n    sqlite_avmd <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"SQLite\", generator == \"avsDefaults\")\n    sqlite_rand <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"SQLite\", generator == \"random\")\n    hsql_dr <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"HyperSQL\", generator == \"directedRandom\")\n    hsql_avm <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"HyperSQL\", generator == \"avs\")\n    hsql_avmd <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"HyperSQL\", generator == \"avsDefaults\")\n    hsql_rand <- d1 %>% dplyr::filter(operator == selected_operator, dbms == \"HyperSQL\", generator == \"random\")\n\n    # A12 for PSQL\n    postgres_avm_effectsize <- ragtag::effectsize_accurate(postgres_dr$mutationScore, postgres_avm$mutationScore)$size\n    postgres_avmd_effectsize <- ragtag::effectsize_accurate(postgres_dr$mutationScore, postgres_avmd$mutationScore)$size\n    postgres_rand_effectsize <- ragtag::effectsize_accurate(postgres_dr$mutationScore, postgres_rand$mutationScore)$size\n\n    # Sig for DR vs AVMR\n    dr_mutation <- postgres_dr$mutationScore\n    avmr_mutation <- postgres_avm$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, avmr_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, avmr_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      a[i,2] = paste(\"\\\\textbf{\",a[i,2],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      a[i,2] = paste(\"\\\\textit{\",a[i,2],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (postgres_avm_effectsize == \"large\") {\n      a[i,2] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",a[i,2], sep = \"\")\n    } else if (postgres_avm_effectsize == \"medium\") {\n      a[i,2] = paste(\"$^{\\\\ast\\\\ast}$\",a[i,2], sep = \"\")\n    } else if (postgres_avm_effectsize == \"small\") {\n      a[i,2] = paste(\"$^{\\\\ast}$\",a[i,2], sep = \"\")\n    } else {\n    }\n\n    # U-test AVMD vs DR\n    avmd_mutation <- postgres_avmd$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, avmd_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, avmd_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      a[i,3] = paste(\"\\\\textbf{\",a[i,3],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      a[i,3] = paste(\"\\\\textit{\",a[i,3],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (postgres_avmd_effectsize == \"large\") {\n      a[i,3] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",a[i,3], sep = \"\")\n    } else if (postgres_avmd_effectsize == \"medium\") {\n      a[i,3] = paste(\"$^{\\\\ast\\\\ast}$\",a[i,3], sep = \"\")\n    } else if (postgres_avmd_effectsize == \"small\") {\n      a[i,3] = paste(\"$^{\\\\ast}$\",a[i,3], sep = \"\")\n    } else {\n\n    }\n\n    # U-test for Random vs DR\n    rand_mutation <- postgres_rand$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, rand_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, rand_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      a[i,4] = paste(\"\\\\textbf{\",a[i,4],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      a[i,4] = paste(\"\\\\textit{\",a[i,4],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (postgres_rand_effectsize == \"large\") {\n      a[i,4] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",a[i,4], sep = \"\")\n    } else if (postgres_rand_effectsize == \"medium\") {\n      a[i,4] = paste(\"$^{\\\\ast\\\\ast}$\",a[i,4], sep = \"\")\n    } else if (postgres_rand_effectsize == \"small\") {\n      a[i,4] = paste(\"$^{\\\\ast}$\",a[i,4], sep = \"\")\n    } else {\n\n    }\n\n    # A12 for SQLite\n    sqlite_avm_effectsize <- ragtag::effectsize_accurate(sqlite_dr$mutationScore, sqlite_avm$mutationScore)$size\n    sqlite_avmd_effectsize <- ragtag::effectsize_accurate(sqlite_dr$mutationScore, sqlite_avmd$mutationScore)$size\n    sqlite_rand_effectsize <- ragtag::effectsize_accurate(sqlite_dr$mutationScore, sqlite_rand$mutationScore)$size\n\n    # U-test dr vs avm-r\n    dr_mutation <- sqlite_dr$mutationScore\n    avmr_mutation <- sqlite_avm$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, avmr_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, avmr_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      b[i,2] = paste(\"\\\\textbf{\",b[i,2],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      b[i,2] = paste(\"\\\\textit{\",b[i,2],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (sqlite_avm_effectsize == \"large\") {\n      b[i,2] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",b[i,2], sep = \"\")\n    } else if (sqlite_avm_effectsize == \"medium\") {\n      b[i,2] = paste(\"$^{\\\\ast\\\\ast}$\",b[i,2], sep = \"\")\n    } else if (sqlite_avm_effectsize == \"small\") {\n      b[i,2] = paste(\"$^{\\\\ast}$\",b[i,2], sep = \"\")\n    } else {\n\n    }\n\n    # U-test AVMD vs dr\n    avmd_mutation <- sqlite_avmd$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, avmd_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, avmd_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      b[i,3] = paste(\"\\\\textbf{\",b[i,3],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      b[i,3] = paste(\"\\\\textit{\",b[i,3],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (sqlite_avmd_effectsize == \"large\") {\n      b[i,3] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",b[i,3], sep = \"\")\n    } else if (sqlite_avmd_effectsize == \"medium\") {\n      b[i,3] = paste(\"$^{\\\\ast\\\\ast}$\",b[i,3], sep = \"\")\n    } else if (sqlite_avmd_effectsize == \"small\") {\n      b[i,3] = paste(\"$^{\\\\ast}$\",b[i,3], sep = \"\")\n    } else {\n\n    }\n\n    # U-test for Random vs DR\n    rand_mutation <- sqlite_rand$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, rand_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, rand_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      b[i,4] = paste(\"\\\\textbf{\",b[i,4],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      b[i,4] = paste(\"\\\\textit{\",b[i,4],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (sqlite_rand_effectsize == \"large\") {\n      b[i,4] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",b[i,4], sep = \"\")\n    } else if (sqlite_rand_effectsize == \"medium\") {\n      b[i,4] = paste(\"$^{\\\\ast\\\\ast}$\",b[i,4], sep = \"\")\n    } else if (sqlite_rand_effectsize == \"small\") {\n      b[i,4] = paste(\"$^{\\\\ast}$\",b[i,4], sep = \"\")\n    } else {\n\n    }\n\n    # A12 for HSQL\n    hsql_avm_effectsize <- ragtag::effectsize_accurate(hsql_dr$mutationScore, hsql_avm$mutationScore)$size\n    hsql_avmd_effectsize <- ragtag::effectsize_accurate(hsql_dr$mutationScore, hsql_avmd$mutationScore)$size\n    hsql_rand_effectsize <- ragtag::effectsize_accurate(hsql_dr$mutationScore, hsql_rand$mutationScore)$size\n\n    # U-test for DR vs AVM-R\n    dr_mutation <- hsql_dr$mutationScore\n    avmr_mutation <- hsql_avm$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, avmr_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, avmr_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      c[i,2] = paste(\"\\\\textbf{\",c[i,2],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      c[i,2] = paste(\"\\\\textit{\",c[i,2],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (hsql_avm_effectsize == \"large\") {\n      c[i,2] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",c[i,2], sep = \"\")\n    } else if (hsql_avm_effectsize == \"medium\") {\n      c[i,2] = paste(\"$^{\\\\ast\\\\ast}$\",c[i,2], sep = \"\")\n    } else if (hsql_avm_effectsize == \"small\") {\n      c[i,2] = paste(\"$^{\\\\ast}$\",c[i,2], sep = \"\")\n    } else {\n\n    }\n\n    # AVM-D vs DR U-test\n    avmd_mutation <- hsql_avmd$mutationScore\n    p1 <- wilcox.test(dr_mutation, avmd_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, avmd_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      c[i,3] = paste(\"\\\\textbf{\",c[i,3],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      c[i,3] = paste(\"\\\\textit{\",c[i,3],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (hsql_avmd_effectsize == \"large\") {\n      c[i,3] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",c[i,3], sep = \"\")\n    } else if (hsql_avmd_effectsize == \"medium\") {\n      c[i,3] = paste(\"$^{\\\\ast\\\\ast}$\",c[i,3], sep = \"\")\n    } else if (hsql_avmd_effectsize == \"small\") {\n      c[i,3] = paste(\"$^{\\\\ast}$\",c[i,3], sep = \"\")\n    } else {\n\n    }\n\n    # Random vs Dr U-test\n    rand_mutation <- hsql_rand$mutationScore\n\n    p1 <- wilcox.test(dr_mutation, rand_mutation, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n    p2 <- wilcox.test(dr_mutation, rand_mutation, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n\n    if (p1 == TRUE & p2 == FALSE) {\n      c[i,4] = paste(\"\\\\textbf{\",c[i,4],\"}\", sep = \"\")\n    } else if (p1 == FALSE & p2 == TRUE) {\n      c[i,4] = paste(\"\\\\textit{\",c[i,4],\"}\", sep = \"\")\n    } else {\n    }\n\n    if (hsql_rand_effectsize == \"large\") {\n      c[i,4] = paste(\"$^{\\\\ast\\\\ast\\\\ast}$\",c[i,4], sep = \"\")\n    } else if (hsql_rand_effectsize == \"medium\") {\n      c[i,4] = paste(\"$^{\\\\ast\\\\ast}$\",c[i,4], sep = \"\")\n    } else if (hsql_rand_effectsize == \"small\") {\n      c[i,4] = paste(\"$^{\\\\ast}$\",c[i,4], sep = \"\")\n    } else {\n\n    }\n\n    # For latex table\n    a1[i,] <- paste(\"\\\\\", a1[i,], sep = \"\")\n\n\n  }\n  a <- a[c(1,4,3,2)]\n  b <- b[c(1,4,3,2)]\n  c <- c[c(1,4,3,2)]\n\n  # With HSQL\n  d <- cbind(a1,c,a,b)\n  # Without HSQL\n  #d <- cbind(a1,a,b)\n\n  if (rtrn == \"tex\") {\n    return(print(xtable::xtable(d), include.rownames=FALSE ,sanitize.text.function = function(x){x}))\n  } else {\n    return(d)\n  }\n}\n\n#' FUNCTION: ordering_mutants_per_schema\n#'\n#' It generates an ordered data frame of mutants (normal type) grouped by each run per schema and its mutation score.\n#' @param d Data frame of mutants\n#' @return A data frame of ordred mutants and grouped by runs and mutation score per run per schema\n#' @importFrom magrittr %>%\n#' @export\nordering_mutants_per_schema <- function(d) {\n\n  # Only selecting normal mutants types\n  d1 <- d %>% dplyr::filter(type == \"NORMAL\")\n  dt <- NULL\n\n  # Get each case study\n  casestudy <- as.vector(dplyr::distinct(d1, schema))[[1]]\n  # Get each DBMS\n  dbs <- as.vector(dplyr::distinct(d1, dbms))[[1]]\n  for (case in casestudy) {\n    schema1 <- case\n    for (db in dbs) {\n      # Filter data\n      filtered_data <- d1 %>% dplyr::filter(schema == schema1, dbms == db) %>% dplyr::group_by(identifier, dbms)\n      # Select first schema to be grouped\n      first_schema <- filtered_data[1,3]\n      test <- NULL\n\n      # Get each run for DRavm\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], datagenerator == \"dravm\") %>% dplyr::select(identifier,dbms,schema) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\")) %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      dravm_minsitrust <- test %>% dplyr::filter(datagenerator == \"dravm\") %>% dplyr::group_by(identifier, dbms, datagenerator, number, schema) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))\n      dravm <- dravm_minsitrust\n      dravm <- dravm %>% dplyr::group_by(number, datagenerator, dbms, schema) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n\n      # Get each run for DR\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], datagenerator == \"directedRandom\") %>% dplyr::select(identifier,dbms,schema) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\")) %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      dr_minsitrust <- test %>% dplyr::filter(datagenerator == \"directedRandom\") %>% dplyr::group_by(identifier, dbms, datagenerator, number, schema) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))\n      dr <- dr_minsitrust\n      dr <- dr %>% dplyr::group_by(number, datagenerator, dbms, schema) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # Get each run for AVM-R\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], datagenerator == \"avs\") %>% dplyr::select(identifier,dbms,schema) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\"))  %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      avs_minsitrust <- test %>% dplyr::filter(datagenerator == \"avs\") %>% dplyr::group_by(identifier, dbms, datagenerator, number, schema) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))\n      avm <- avs_minsitrust\n      avm <- avm %>% dplyr::group_by(number, datagenerator, dbms, schema) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # Get each run for AVM-D\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], datagenerator == \"avsDefaults\") %>% dplyr::select(identifier,dbms,schema) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\"))  %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      avsd_minsitrust <- test %>% dplyr::filter(datagenerator == \"avsDefaults\") %>% dplyr::group_by(identifier, dbms, datagenerator, number, schema) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))\n      avmd <- avsd_minsitrust\n      avmd <- avmd %>% dplyr::group_by(number, datagenerator, dbms, schema) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # Get each run for Random\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], datagenerator == \"random\") %>% dplyr::select(identifier,dbms,schema) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\"))  %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      ran_minsitrust <- test %>% dplyr::filter(datagenerator == \"random\") %>% dplyr::group_by(identifier, dbms, datagenerator, number, schema) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))\n      rand <- ran_minsitrust\n      rand <- rand %>% dplyr::group_by(number, datagenerator, dbms, schema) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # save each run per DBMS\n      if (db == \"Postgres\") {\n        postgres_dr <- dr\n        postgres_avm <- avm\n        postgres_avmd <- avmd\n        postgres_rand <- rand\n        postgres_dravm <- dravm\n\n      } else if (db == \"SQLite\") {\n        sqlite_dr <- dr\n        sqlite_avm <- avm\n        sqlite_avmd <- avmd\n        sqlite_rand <- rand\n        sqlite_dravm <- dravm\n\n      } else if (db == \"HyperSQL\") {\n        hsql_dr <- dr\n        hsql_avm <- avm\n        hsql_avmd <- avmd\n        hsql_rand <- rand\n        hsql_dravm <- dravm\n\n      }\n\n    }\n\n    # Arrange by Runs (numbers)\n    postgres_dr <- dplyr::arrange(postgres_dr, number)\n    postgres_avm <- dplyr::arrange(postgres_avm, number)\n    postgres_avmd <- dplyr::arrange(postgres_avmd, number)\n    postgres_rand <- dplyr::arrange(postgres_rand, number)\n    postgres_dravm <- dplyr::arrange(postgres_dravm, number)\n\n    sqlite_dr <- dplyr::arrange(sqlite_dr, number)\n    sqlite_avm <- dplyr::arrange(sqlite_avm, number)\n    sqlite_avmd <- dplyr::arrange(sqlite_avmd, number)\n    sqlite_rand <- dplyr::arrange(sqlite_rand, number)\n    sqlite_dravm <- dplyr::arrange(sqlite_dravm, number)\n\n    hsql_dr <- dplyr::arrange(hsql_dr, number)\n    hsql_avm <- dplyr::arrange(hsql_avm, number)\n    hsql_avmd <- dplyr::arrange(hsql_avmd, number)\n    hsql_rand <- dplyr::arrange(hsql_rand, number)\n    hsql_dravm <- dplyr::arrange(hsql_dravm, number)\n\n\n    # bind them together\n    postgres <- rbind(postgres_dr, postgres_avm, postgres_avmd, postgres_rand,postgres_dravm)\n    sqlite <- rbind(sqlite_dr, sqlite_avm, sqlite_avmd, sqlite_rand,sqlite_dravm)\n    hsql <- rbind(hsql_dr, hsql_avm, hsql_avmd, hsql_rand,hsql_dravm)\n\n    dt <- rbind(dt, postgres, sqlite, hsql)\n  }\n  return(dt)\n}\n\n#' FUNCTION: ordering_mutants_per_operator\n#'\n#' It generates an ordered data frame of mutants (normal type) grouped by each run per operator and its mutation score.\n#' @param d Data frame of mutants\n#' @return A data frame of ordred mutants and grouped by runs and mutation score per run per operator\n#' @importFrom magrittr %>%\n#' @export\nordering_mutants_per_operator <- function(d) {\n  # Only selecting normal mutants types\n  d1 <- d %>% dplyr::filter(type == \"NORMAL\")\n  dt <- NULL\n\n  # get DBMSs\n  dbs <- as.vector(distinct(d1, dbms))[[1]]\n  # Get Operators\n  operators <- as.vector(distinct(d1, operator))[[1]]\n  for (selected_operator in operators) {\n    for (db in dbs) {\n      # Filter Data per operator\n      filtered_data <- d1 %>% dplyr::filter(operator == selected_operator, schema != \"iTrust\", dbms == db) %>% dplyr::group_by(identifier, dbms)\n      first_schema <- filtered_data[1,3]\n      test <- NULL\n\n      # Get each run for DR\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], generator == \"directedRandom\") %>% dplyr::select(identifier,dbms,schema,operator,type) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\", \"operator\", \"type\"))  %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      dr_minsitrust <- test %>% dplyr::filter(generator == \"directedRandom\") %>% dplyr::group_by(identifier, dbms, generator, number, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      dr_itrust <- d1 %>% dplyr::filter(schema == \"iTrust\", generator == \"directedRandom\", type == \"NORMAL\", operator == selected_operator, dbms == db) %>% dplyr::group_by(identifier, dbms, generator, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      # Chekcing if there is any Itrust mutants\n      if (nrow(dr_itrust) > 0) {\n        dr_itrust$number=1:nrow(dr_itrust)\n      }\n      dr <- rbind(dr_minsitrust, dr_itrust)\n      dr <- dr %>% dplyr::group_by(number, generator, dbms, operator) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # Get each run for AVM-R\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], generator == \"avs\") %>% dplyr::select(identifier,dbms,schema,operator,type) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\", \"operator\", \"type\"))  %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      avs_minsitrust <- test %>% dplyr::filter(generator == \"avs\") %>% dplyr::group_by(identifier, dbms, generator, number, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      avs_itrust <- d1 %>% dplyr::filter(schema == \"iTrust\", generator == \"avs\", type == \"NORMAL\", operator == selected_operator, dbms == db) %>% dplyr::group_by(identifier, dbms, generator, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      # Chekcing if there is any Itrust mutants\n      if (nrow(avs_itrust) > 0) {\n        avs_itrust$number=1:nrow(avs_itrust)\n      }\n      avm <- rbind(avs_minsitrust, avs_itrust)\n      avm <- avm %>% dplyr::group_by(number, generator, dbms, operator) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # Get each run for AVM-D\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], generator == \"avsDefaults\") %>% dplyr::select(identifier,dbms,schema,operator,type) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\", \"operator\", \"type\"))  %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      avsd_minsitrust <- test %>% dplyr::filter(generator == \"avsDefaults\") %>% dplyr::group_by(identifier, dbms, generator, number, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      avsd_itrust <- d1 %>% dplyr::filter(schema == \"iTrust\", generator == \"avsDefaults\", type == \"NORMAL\", operator == selected_operator, dbms == db) %>% dplyr::group_by(identifier, dbms, generator, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      # Chekcing if there is any Itrust mutants\n      if (nrow(avsd_itrust) > 0) {\n        avsd_itrust$number=1:nrow(avsd_itrust)\n      }\n      avmd <- rbind(avsd_minsitrust, avsd_itrust)\n      avmd <- avmd %>% dplyr::group_by(number, generator, dbms, operator) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # Get each run for Random\n      ids <- filtered_data %>% dplyr::filter(schema== first_schema[[1,1]], generator == \"random\") %>% dplyr::select(identifier,dbms,schema,operator,type) %>% unique\n      ids$number=1:nrow(ids)\n      filtered_data %>% left_join(ids, by = c(\"identifier\", \"dbms\", \"schema\", \"operator\", \"type\"))  %>% dplyr::mutate(number=as.numeric(ifelse(is.na(number),1,number))) %>% ungroup %>% dplyr::mutate(number = cummax(number)) -> test\n      ran_minsitrust <- test %>% dplyr::filter(generator == \"random\") %>% dplyr::group_by(identifier, dbms, generator, number, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      ran_itrust <- d1 %>% dplyr::filter(schema == \"iTrust\", generator == \"random\", type == \"NORMAL\", operator == selected_operator, dbms == db) %>% dplyr::group_by(identifier, dbms, generator, operator) %>% dplyr::summarise(killed_mutants = sum(killed == \"true\"), total_mutants = (sum(killed == \"true\") + sum(killed == \"false\")))# %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n      # Chekcing if there is any Itrust mutants\n      if (nrow(ran_itrust) > 0) {\n        ran_itrust$number=1:nrow(avsd_itrust)\n      }\n      rand <- rbind(ran_minsitrust, ran_itrust)\n      rand <- rand %>% dplyr::group_by(number, generator, dbms, operator) %>% dplyr::summarise(killed_mutants = sum(killed_mutants), total_mutants = sum(total_mutants)) %>% dplyr::mutate(mutationScore = round((killed_mutants/total_mutants) * 100, 2))\n\n      # save each run per DBMS\n      if (db == \"Postgres\") {\n        postgres_dr <- dr\n        postgres_avm <- avm\n        postgres_avmd <- avmd\n        postgres_rand <- rand\n      } else if (db == \"SQLite\") {\n        sqlite_dr <- dr\n        sqlite_avm <- avm\n        sqlite_avmd <- avmd\n        sqlite_rand <- rand\n      } else if (db == \"HyperSQL\") {\n        hsql_dr <- dr\n        hsql_avm <- avm\n        hsql_avmd <- avmd\n        hsql_rand <- rand\n      }\n\n    }\n    # Arrange by Runs (numbers)\n    postgres_dr <- dplyr::arrange(postgres_dr, number)\n    postgres_avm <- dplyr::arrange(postgres_avm, number)\n    postgres_avmd <- dplyr::arrange(postgres_avmd, number)\n    postgres_rand <- dplyr::arrange(postgres_rand, number)\n    sqlite_dr <- dplyr::arrange(sqlite_dr, number)\n    sqlite_avm <- dplyr::arrange(sqlite_avm, number)\n    sqlite_avmd <- dplyr::arrange(sqlite_avmd, number)\n    sqlite_rand <- dplyr::arrange(sqlite_rand, number)\n    hsql_dr <- dplyr::arrange(hsql_dr, number)\n    hsql_avm <- dplyr::arrange(hsql_avm, number)\n    hsql_avmd <- dplyr::arrange(hsql_avmd, number)\n    hsql_rand <- dplyr::arrange(hsql_rand, number)\n\n    # bind them together\n    postgres <- rbind(postgres_dr, postgres_avm, postgres_avmd, postgres_rand)\n    sqlite <- rbind(sqlite_dr, sqlite_avm, sqlite_avmd, sqlite_rand)\n    hsql <- rbind(hsql_dr, hsql_avm, hsql_avmd, hsql_rand)\n\n    dt <- rbind(dt, postgres, sqlite, hsql)\n  }\n  return(dt)\n}\n\n#' FUNCTION: comparing_sig\n#'\n#'\n#' @return latex of cell\n#' @importFrom magrittr %>%\n#' @export\ncomparing_sig <- function(sample1, sample2, effect, result) {\n  # U-test AVMR vs DR\n  p1 <- wilcox.test(sample1, sample2, alternative = \"greater\", exact = FALSE)$p.value <= 0.01\n  p2 <- wilcox.test(sample1, sample2, alternative = \"less\", exact = FALSE)$p.value <= 0.01\n  r <- result\n  # Check one-sided test\n  if (p1 == TRUE & p2 == FALSE) {\n    r = paste(\"$\\\\APLdown$\",result,\"\", sep = \"\")\n  } else if (p1 == FALSE & p2 == TRUE) {\n    r = paste(\"$\\\\APLup$\",result,\"\", sep = \"\")\n  } else {\n  }\n\n  # check effect\n  if (effect == \"large\") {\n    r = paste(\"$\\\\ocircle$\",r, sep = \"\")\n  }\n  # else if (effect == \"medium\") {\n  #   r = paste(\"$^{\\\\ast\\\\ast}$\",r, sep = \"\")\n  # } else if (effect == \"small\") {\n  #   r = paste(\"$^{\\\\ast}$\",r, sep = \"\")\n  # } else {\n  #\n  # }\n  return(r)\n}\n\n\n#' FUNCTION: comparing_sig_timing\n#'\n#'\n#' @return latex of cell\n#' @importFrom magrittr %>%\n#' @export\ncomparing_sig_timing <- function(sample1, sample2, effect, result) {\n  # U-test AVMR vs DR\n  p1 <- wilcox.test(sample1, sample2, alternative = \"greater\", exact = FALSE)$p.value >= 0.01\n  p2 <- wilcox.test(sample1, sample2, alternative = \"less\", exact = FALSE)$p.value >= 0.01\n  r <- result\n  # Check one-sided test\n  if (p1 == TRUE & p2 == FALSE) {\n    r = paste(\"$\\\\APLdown$\",result,\"\", sep = \"\")\n  } else if (p1 == FALSE & p2 == TRUE) {\n    r = paste(\"$\\\\APLup$\",result,\"\", sep = \"\")\n  } else {\n  }\n\n  # check effect\n  if (effect == \"large\") {\n    r = paste(\"$\\\\ocircle$\",r, sep = \"\")\n  }\n  # else if (effect == \"medium\") {\n  #   r = paste(\"$^{\\\\ast\\\\ast}$\",r, sep = \"\")\n  # } else if (effect == \"small\") {\n  #   r = paste(\"$^{\\\\ast}$\",r, sep = \"\")\n  # } else {\n  #\n  # }\n\n  return(r)\n\n}\n",
    "created" : 1502100548738.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "9|69|220|0|\n231|67|452|0|\n455|72|566|0|\n577|75|776|0|\n788|77|1070|0|\n1079|44|1193|0|\n1202|46|1311|0|\n1319|61|1344|0|\n1353|68|1380|0|\n",
    "hash" : "2591113622",
    "id" : "3ABB5C7C",
    "lastKnownWriteTime" : 1503318816,
    "last_content_update" : 1503324059002,
    "path" : "~/phd_exper/hyper-avm/RPackage/concentroR/R/visualise.R",
    "project_path" : "R/visualise.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}